/* 
 * Screenshot Capture API
 *
 * screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IScreenshotApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="hash">The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>byte[]</returns>
        byte[] CaptureScreenshotAuthenticated (string token, string hash, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="hash">The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> CaptureScreenshotAuthenticatedWithHttpInfo (string token, string hash, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>byte[]</returns>
        byte[] CaptureScreenshotUnauthenticated (string token, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> CaptureScreenshotUnauthenticatedWithHttpInfo (string token, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="hash">The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> CaptureScreenshotAuthenticatedAsync (string token, string hash, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="hash">The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> CaptureScreenshotAuthenticatedAsyncWithHttpInfo (string token, string hash, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> CaptureScreenshotUnauthenticatedAsync (string token, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> CaptureScreenshotUnauthenticatedAsyncWithHttpInfo (string token, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ScreenshotApi : IScreenshotApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenshotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScreenshotApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenshotApi"/> class
        /// </summary>
        /// <returns></returns>
        public ScreenshotApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenshotApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScreenshotApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="hash">The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>byte[]</returns>
        public byte[] CaptureScreenshotAuthenticated (string token, string hash, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null)
        {
             ApiResponse<byte[]> localVarResponse = CaptureScreenshotAuthenticatedWithHttpInfo(token, hash, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="hash">The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > CaptureScreenshotAuthenticatedWithHttpInfo (string token, string hash, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling ScreenshotApi->CaptureScreenshotAuthenticated");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling ScreenshotApi->CaptureScreenshotAuthenticated");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling ScreenshotApi->CaptureScreenshotAuthenticated");

            var localVarPath = "/capture/{token}/{hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/pdf",
                "image/jpeg",
                "image/png",
                "image/webp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (hash != null) localVarPathParams.Add("hash", this.Configuration.ApiClient.ParameterToString(hash)); // path parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "url", url)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fileType", fileType)); // query parameter
            if (ttl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ttl", ttl)); // query parameter
            if (invalidate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invalidate", invalidate)); // query parameter
            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter
            if (lazyloadScroll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lazyload_scroll", lazyloadScroll)); // query parameter
            if (delay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delay", delay)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (scale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scale", scale)); // query parameter
            if (x != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "x", x)); // query parameter
            if (y != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "y", y)); // query parameter
            if (redirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect", redirect)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (randomUserAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "random_user_agent", randomUserAgent)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (headers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "headers", headers)); // query parameter
            if (cookies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookies", cookies)); // query parameter
            if (css != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "css", css)); // query parameter
            if (js != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "js", js)); // query parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter
            if (element != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "element", element)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter
            if (device != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device", device)); // query parameter
            if (latitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latitude", latitude)); // query parameter
            if (longitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longitude", longitude)); // query parameter
            if (accuracy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accuracy", accuracy)); // query parameter
            if (proxy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy", proxy)); // query parameter
            if (adblock != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adblock", adblock)); // query parameter
            if (hideCookieBanners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hide_cookie_banners", hideCookieBanners)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CaptureScreenshotAuthenticated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="hash">The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> CaptureScreenshotAuthenticatedAsync (string token, string hash, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null)
        {
             ApiResponse<byte[]> localVarResponse = await CaptureScreenshotAuthenticatedAsyncWithHttpInfo(token, hash, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="hash">The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> CaptureScreenshotAuthenticatedAsyncWithHttpInfo (string token, string hash, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling ScreenshotApi->CaptureScreenshotAuthenticated");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling ScreenshotApi->CaptureScreenshotAuthenticated");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling ScreenshotApi->CaptureScreenshotAuthenticated");

            var localVarPath = "/capture/{token}/{hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/pdf",
                "image/jpeg",
                "image/png",
                "image/webp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (hash != null) localVarPathParams.Add("hash", this.Configuration.ApiClient.ParameterToString(hash)); // path parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "url", url)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fileType", fileType)); // query parameter
            if (ttl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ttl", ttl)); // query parameter
            if (invalidate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invalidate", invalidate)); // query parameter
            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter
            if (lazyloadScroll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lazyload_scroll", lazyloadScroll)); // query parameter
            if (delay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delay", delay)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (scale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scale", scale)); // query parameter
            if (x != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "x", x)); // query parameter
            if (y != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "y", y)); // query parameter
            if (redirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect", redirect)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (randomUserAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "random_user_agent", randomUserAgent)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (headers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "headers", headers)); // query parameter
            if (cookies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookies", cookies)); // query parameter
            if (css != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "css", css)); // query parameter
            if (js != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "js", js)); // query parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter
            if (element != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "element", element)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter
            if (device != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device", device)); // query parameter
            if (latitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latitude", latitude)); // query parameter
            if (longitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longitude", longitude)); // query parameter
            if (accuracy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accuracy", accuracy)); // query parameter
            if (proxy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy", proxy)); // query parameter
            if (adblock != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adblock", adblock)); // query parameter
            if (hideCookieBanners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hide_cookie_banners", hideCookieBanners)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CaptureScreenshotAuthenticated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>byte[]</returns>
        public byte[] CaptureScreenshotUnauthenticated (string token, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null)
        {
             ApiResponse<byte[]> localVarResponse = CaptureScreenshotUnauthenticatedWithHttpInfo(token, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > CaptureScreenshotUnauthenticatedWithHttpInfo (string token, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling ScreenshotApi->CaptureScreenshotUnauthenticated");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling ScreenshotApi->CaptureScreenshotUnauthenticated");

            var localVarPath = "/capture/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/pdf",
                "image/jpeg",
                "image/png",
                "image/webp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "url", url)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fileType", fileType)); // query parameter
            if (ttl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ttl", ttl)); // query parameter
            if (invalidate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invalidate", invalidate)); // query parameter
            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter
            if (lazyloadScroll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lazyload_scroll", lazyloadScroll)); // query parameter
            if (delay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delay", delay)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (scale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scale", scale)); // query parameter
            if (x != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "x", x)); // query parameter
            if (y != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "y", y)); // query parameter
            if (redirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect", redirect)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (randomUserAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "random_user_agent", randomUserAgent)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (headers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "headers", headers)); // query parameter
            if (cookies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookies", cookies)); // query parameter
            if (css != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "css", css)); // query parameter
            if (js != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "js", js)); // query parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter
            if (element != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "element", element)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter
            if (device != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device", device)); // query parameter
            if (latitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latitude", latitude)); // query parameter
            if (longitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longitude", longitude)); // query parameter
            if (accuracy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accuracy", accuracy)); // query parameter
            if (proxy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy", proxy)); // query parameter
            if (adblock != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adblock", adblock)); // query parameter
            if (hideCookieBanners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hide_cookie_banners", hideCookieBanners)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CaptureScreenshotUnauthenticated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///  screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> CaptureScreenshotUnauthenticatedAsync (string token, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null)
        {
             ApiResponse<byte[]> localVarResponse = await CaptureScreenshotUnauthenticatedAsyncWithHttpInfo(token, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  screenshot-capture-api.com Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A valid token is needed to make paid API calls. Tokens can be managed from your account.</param>
        /// <param name="url">The URL of the website you want to capture. Please include the protocol (http:// or https://).</param>
        /// <param name="fileType">The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)</param>
        /// <param name="ttl">Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)</param>
        /// <param name="invalidate">Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)</param>
        /// <param name="full">Set this parameter to true if you want to screenshot the whole web page in full size. (optional)</param>
        /// <param name="lazyloadScroll">Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)</param>
        /// <param name="delay">The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)</param>
        /// <param name="width">The width, in pixels, of the browser viewport to use. (optional, default to 1920)</param>
        /// <param name="height">The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)</param>
        /// <param name="quality">The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)</param>
        /// <param name="scale">The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)</param>
        /// <param name="x">The starting point of a section screenshot on the X axis. (optional, default to 0)</param>
        /// <param name="y">The starting point of a section screenshot on the Y axis. (optional, default to 0)</param>
        /// <param name="redirect">If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)</param>
        /// <param name="language">Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)</param>
        /// <param name="randomUserAgent">Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)</param>
        /// <param name="userAgent">Sets the user agent header to emulate a specific device when taking screenshots. (optional)</param>
        /// <param name="headers">A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="cookies">A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)</param>
        /// <param name="css">Inject your custom CSS. (optional)</param>
        /// <param name="js">Inject your custom Javascript. (optional)</param>
        /// <param name="wait">Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)</param>
        /// <param name="element">Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)</param>
        /// <param name="timezone">The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)</param>
        /// <param name="device">The device used in the emulation. (optional)</param>
        /// <param name="latitude">The latitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="longitude">The longitude used in the emulation of the geo-location. (optional, default to 0.0)</param>
        /// <param name="accuracy">The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)</param>
        /// <param name="proxy">Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)</param>
        /// <param name="adblock">Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)</param>
        /// <param name="hideCookieBanners">Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> CaptureScreenshotUnauthenticatedAsyncWithHttpInfo (string token, string url, string fileType = null, long? ttl = null, bool? invalidate = null, bool? full = null, bool? lazyloadScroll = null, long? delay = null, long? width = null, long? height = null, long? quality = null, decimal? scale = null, long? x = null, long? y = null, bool? redirect = null, string language = null, bool? randomUserAgent = null, string userAgent = null, string headers = null, string cookies = null, string css = null, string js = null, string wait = null, string element = null, string timezone = null, string device = null, decimal? latitude = null, decimal? longitude = null, decimal? accuracy = null, string proxy = null, bool? adblock = null, bool? hideCookieBanners = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling ScreenshotApi->CaptureScreenshotUnauthenticated");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling ScreenshotApi->CaptureScreenshotUnauthenticated");

            var localVarPath = "/capture/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/pdf",
                "image/jpeg",
                "image/png",
                "image/webp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "url", url)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fileType", fileType)); // query parameter
            if (ttl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ttl", ttl)); // query parameter
            if (invalidate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invalidate", invalidate)); // query parameter
            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter
            if (lazyloadScroll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lazyload_scroll", lazyloadScroll)); // query parameter
            if (delay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delay", delay)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quality", quality)); // query parameter
            if (scale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scale", scale)); // query parameter
            if (x != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "x", x)); // query parameter
            if (y != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "y", y)); // query parameter
            if (redirect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect", redirect)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (randomUserAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "random_user_agent", randomUserAgent)); // query parameter
            if (userAgent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_agent", userAgent)); // query parameter
            if (headers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "headers", headers)); // query parameter
            if (cookies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookies", cookies)); // query parameter
            if (css != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "css", css)); // query parameter
            if (js != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "js", js)); // query parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter
            if (element != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "element", element)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter
            if (device != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device", device)); // query parameter
            if (latitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latitude", latitude)); // query parameter
            if (longitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longitude", longitude)); // query parameter
            if (accuracy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accuracy", accuracy)); // query parameter
            if (proxy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "proxy", proxy)); // query parameter
            if (adblock != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adblock", adblock)); // query parameter
            if (hideCookieBanners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hide_cookie_banners", hideCookieBanners)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CaptureScreenshotUnauthenticated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}

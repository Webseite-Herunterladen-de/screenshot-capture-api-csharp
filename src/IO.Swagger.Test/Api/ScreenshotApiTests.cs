/* 
 * Screenshot Capture API
 *
 * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ScreenshotApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ScreenshotApiTests
    {
        private ScreenshotApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ScreenshotApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ScreenshotApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ScreenshotApi
            //Assert.IsInstanceOfType(typeof(ScreenshotApi), instance, "instance is a ScreenshotApi");
        }

        /// <summary>
        /// Test CaptureScreenshotAuthenticated
        /// </summary>
        [Test]
        public void CaptureScreenshotAuthenticatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string hash = null;
            //string url = null;
            //string fileType = null;
            //long? ttl = null;
            //bool? invalidate = null;
            //bool? full = null;
            //bool? lazyloadScroll = null;
            //long? delay = null;
            //long? width = null;
            //long? height = null;
            //long? quality = null;
            //decimal? scale = null;
            //long? x = null;
            //long? y = null;
            //bool? redirect = null;
            //string language = null;
            //bool? randomUserAgent = null;
            //string userAgent = null;
            //string headers = null;
            //string cookies = null;
            //string css = null;
            //string js = null;
            //string wait = null;
            //string element = null;
            //string timezone = null;
            //string device = null;
            //decimal? latitude = null;
            //decimal? longitude = null;
            //decimal? accuracy = null;
            //string proxy = null;
            //bool? adblock = null;
            //bool? hideCookieBanners = null;
            //var response = instance.CaptureScreenshotAuthenticated(token, hash, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        /// <summary>
        /// Test CaptureScreenshotUnauthenticated
        /// </summary>
        [Test]
        public void CaptureScreenshotUnauthenticatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string url = null;
            //string fileType = null;
            //long? ttl = null;
            //bool? invalidate = null;
            //bool? full = null;
            //bool? lazyloadScroll = null;
            //long? delay = null;
            //long? width = null;
            //long? height = null;
            //long? quality = null;
            //decimal? scale = null;
            //long? x = null;
            //long? y = null;
            //bool? redirect = null;
            //string language = null;
            //bool? randomUserAgent = null;
            //string userAgent = null;
            //string headers = null;
            //string cookies = null;
            //string css = null;
            //string js = null;
            //string wait = null;
            //string element = null;
            //string timezone = null;
            //string device = null;
            //decimal? latitude = null;
            //decimal? longitude = null;
            //decimal? accuracy = null;
            //string proxy = null;
            //bool? adblock = null;
            //bool? hideCookieBanners = null;
            //var response = instance.CaptureScreenshotUnauthenticated(token, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
    }

}
